/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteStageResponse200 from '../model/DeleteStageResponse200';
import DeleteStagesResponse200 from '../model/DeleteStagesResponse200';
import GetAddUpdateStage from '../model/GetAddUpdateStage';
import GetOneStage from '../model/GetOneStage';
import GetStageDeals from '../model/GetStageDeals';
import GetStages from '../model/GetStages';
import NumberBoolean from '../model/NumberBoolean';

/**
* Stages service.
* @module api/StagesApi
* @version 1.0.0
*/
export default class StagesApi {

    /**
    * Constructs a new StagesApi. 
    * @alias module:api/StagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a new stage
     * Adds a new stage, returns the ID upon success.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the Stage
     * @param {Number} opts.pipelineId The ID of the Pipeline to add Stage to.
     * @param {Number} opts.dealProbability Deal success probability percentage. Used/shown when Deal weighted values are used
     * @param {module:model/Number} opts.rottenFlag Whether Deals in this stage can become rotten
     * @param {Number} opts.rottenDays The number of days the Deals not updated in this Stage would become rotten. Applies only if the rotten_flag is set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddUpdateStage} and HTTP response
     */
    addStageWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'pipeline_id': opts['pipelineId'],
        'deal_probability': opts['dealProbability'],
        'rotten_flag': opts['rottenFlag'],
        'rotten_days': opts['rottenDays']
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GetAddUpdateStage;
      return this.apiClient.callApi(
        '/stages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new stage
     * Adds a new stage, returns the ID upon success.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the Stage
     * @param {Number} opts.pipelineId The ID of the Pipeline to add Stage to.
     * @param {Number} opts.dealProbability Deal success probability percentage. Used/shown when Deal weighted values are used
     * @param {module:model/Number} opts.rottenFlag Whether Deals in this stage can become rotten
     * @param {Number} opts.rottenDays The number of days the Deals not updated in this Stage would become rotten. Applies only if the rotten_flag is set.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddUpdateStage}
     */
    addStage(opts) {
      return this.addStageWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete a stage
     * Marks a stage as deleted.
     * @param {Number} id ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteStageResponse200} and HTTP response
     */
    deleteStageWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStageResponse200;
      return this.apiClient.callApi(
        '/stages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a stage
     * Marks a stage as deleted.
     * @param {Number} id ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteStageResponse200}
     */
    deleteStage(id) {
      return this.deleteStageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete multiple stages in bulk
     * Marks multiple stages as deleted.
     * @param {String} ids Comma-separated stage IDs to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteStagesResponse200} and HTTP response
     */
    deleteStagesWithHttpInfo(ids) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteStages");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': ids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStagesResponse200;
      return this.apiClient.callApi(
        '/stages', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete multiple stages in bulk
     * Marks multiple stages as deleted.
     * @param {String} ids Comma-separated stage IDs to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteStagesResponse200}
     */
    deleteStages(ids) {
      return this.deleteStagesWithHttpInfo(ids)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get one stage
     * Returns data about a specific stage.
     * @param {Number} id ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOneStage} and HTTP response
     */
    getStageWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOneStage;
      return this.apiClient.callApi(
        '/stages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get one stage
     * Returns data about a specific stage.
     * @param {Number} id ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOneStage}
     */
    getStage(id) {
      return this.getStageWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get deals in a stage
     * Lists deals in a specific stage.
     * @param {Number} id ID of the stage
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterId If supplied, only deals matching the given filter will be returned.
     * @param {Number} opts.userId If supplied, filter_id will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {module:model/NumberBoolean} opts.everyone If supplied, filter_id and user_id will not be considered â€“ instead, deals owned by everyone will be returned.
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetStageDeals} and HTTP response
     */
    getStageDealsWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStageDeals");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter_id': opts['filterId'],
        'user_id': opts['userId'],
        'everyone': opts['everyone'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStageDeals;
      return this.apiClient.callApi(
        '/stages/{id}/deals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get deals in a stage
     * Lists deals in a specific stage.
     * @param {Number} id ID of the stage
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterId If supplied, only deals matching the given filter will be returned.
     * @param {Number} opts.userId If supplied, filter_id will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {module:model/NumberBoolean} opts.everyone If supplied, filter_id and user_id will not be considered â€“ instead, deals owned by everyone will be returned.
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetStageDeals}
     */
    getStageDeals(id, opts) {
      return this.getStageDealsWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get all stages
     * Returns data about all stages.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pipelineId The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetStages} and HTTP response
     */
    getStagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pipeline_id': opts['pipelineId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStages;
      return this.apiClient.callApi(
        '/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all stages
     * Returns data about all stages.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pipelineId The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetStages}
     */
    getStages(opts) {
      return this.getStagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update stage details
     * Updates the properties of a stage.
     * @param {Number} id ID of the stage
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the Stage
     * @param {Number} opts.pipelineId The ID of the Pipeline to add Stage to.
     * @param {Number} opts.dealProbability Deal success probability percentage. Used/shown when Deal weighted values are used
     * @param {module:model/Number} opts.rottenFlag Whether Deals in this stage can become rotten
     * @param {Number} opts.rottenDays The number of days the Deals not updated in this Stage would become rotten. Applies only if the rotten_flag is set.
     * @param {Number} opts.orderNr An order number for this stage. Order numbers should be used to order the stages in the pipeline.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddUpdateStage} and HTTP response
     */
    updateStageWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'pipeline_id': opts['pipelineId'],
        'deal_probability': opts['dealProbability'],
        'rotten_flag': opts['rottenFlag'],
        'rotten_days': opts['rottenDays'],
        'order_nr': opts['orderNr']
      };

      let authNames = ['api_key', 'oauth2'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GetAddUpdateStage;
      return this.apiClient.callApi(
        '/stages/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update stage details
     * Updates the properties of a stage.
     * @param {Number} id ID of the stage
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the Stage
     * @param {Number} opts.pipelineId The ID of the Pipeline to add Stage to.
     * @param {Number} opts.dealProbability Deal success probability percentage. Used/shown when Deal weighted values are used
     * @param {module:model/Number} opts.rottenFlag Whether Deals in this stage can become rotten
     * @param {Number} opts.rottenDays The number of days the Deals not updated in this Stage would become rotten. Applies only if the rotten_flag is set.
     * @param {Number} opts.orderNr An order number for this stage. Order numbers should be used to order the stages in the pipeline.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddUpdateStage}
     */
    updateStage(id, opts) {
      return this.updateStageWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


}
