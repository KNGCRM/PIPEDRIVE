/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageObjectAttachments from './MessageObjectAttachments';

/**
 * The MessageObject model module.
 * @module model/MessageObject
 * @version 1.0.0
 */
class MessageObject {
    /**
     * Constructs a new <code>MessageObject</code>.
     * @alias module:model/MessageObject
     * @param id {String} The ID of the message
     * @param channelId {String} The channel ID as in the provider
     * @param senderId {String} The ID of the provider's user that sent the message
     * @param conversationId {String} The ID of the conversation
     * @param message {String} The body of the message
     * @param status {module:model/MessageObject.StatusEnum} The status of the message
     * @param createdAt {Date} The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM
     */
    constructor(id, channelId, senderId, conversationId, message, status, createdAt) { 
        
        MessageObject.initialize(this, id, channelId, senderId, conversationId, message, status, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, channelId, senderId, conversationId, message, status, createdAt) { 
        obj['id'] = id;
        obj['channel_id'] = channelId;
        obj['sender_id'] = senderId;
        obj['conversation_id'] = conversationId;
        obj['message'] = message;
        obj['status'] = status;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>MessageObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageObject} obj Optional instance to populate.
     * @return {module:model/MessageObject} The populated <code>MessageObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageObject();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');

                delete data['id'];
            }
            if (data.hasOwnProperty('channel_id')) {
                obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'String');

                delete data['channel_id'];
            }
            if (data.hasOwnProperty('sender_id')) {
                obj['sender_id'] = ApiClient.convertToType(data['sender_id'], 'String');

                delete data['sender_id'];
            }
            if (data.hasOwnProperty('conversation_id')) {
                obj['conversation_id'] = ApiClient.convertToType(data['conversation_id'], 'String');

                delete data['conversation_id'];
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');

                delete data['message'];
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');

                delete data['status'];
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');

                delete data['created_at'];
            }
            if (data.hasOwnProperty('reply_by')) {
                obj['reply_by'] = ApiClient.convertToType(data['reply_by'], 'Date');

                delete data['reply_by'];
            }
            if (data.hasOwnProperty('conversation_link')) {
                obj['conversation_link'] = ApiClient.convertToType(data['conversation_link'], 'String');

                delete data['conversation_link'];
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [MessageObjectAttachments]);

                delete data['attachments'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the message
 * @member {String} id
 */
MessageObject.prototype['id'] = undefined;

/**
 * The channel ID as in the provider
 * @member {String} channel_id
 */
MessageObject.prototype['channel_id'] = undefined;

/**
 * The ID of the provider's user that sent the message
 * @member {String} sender_id
 */
MessageObject.prototype['sender_id'] = undefined;

/**
 * The ID of the conversation
 * @member {String} conversation_id
 */
MessageObject.prototype['conversation_id'] = undefined;

/**
 * The body of the message
 * @member {String} message
 */
MessageObject.prototype['message'] = undefined;

/**
 * The status of the message
 * @member {module:model/MessageObject.StatusEnum} status
 */
MessageObject.prototype['status'] = undefined;

/**
 * The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM
 * @member {Date} created_at
 */
MessageObject.prototype['created_at'] = undefined;

/**
 * The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM
 * @member {Date} reply_by
 */
MessageObject.prototype['reply_by'] = undefined;

/**
 * A URL that can open the conversation in the provider's side
 * @member {String} conversation_link
 */
MessageObject.prototype['conversation_link'] = undefined;

/**
 * The list of attachments available in the message
 * @member {Array.<module:model/MessageObjectAttachments>} attachments
 */
MessageObject.prototype['attachments'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MessageObject['StatusEnum'] = {

    /**
     * value: "sent"
     * @const
     */
    "sent": "sent",

    /**
     * value: "delivered"
     * @const
     */
    "delivered": "delivered",

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default MessageObject;

