/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessageObjectAttachments model module.
 * @module model/MessageObjectAttachments
 * @version 1.0.0
 */
class MessageObjectAttachments {
    /**
     * Constructs a new <code>MessageObjectAttachments</code>.
     * @alias module:model/MessageObjectAttachments
     * @param id {String} The ID of the attachment
     * @param type {String} The mime-type of the attachment
     * @param url {String} A URL to the file
     */
    constructor(id, type, url) { 
        
        MessageObjectAttachments.initialize(this, id, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, url) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>MessageObjectAttachments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageObjectAttachments} obj Optional instance to populate.
     * @return {module:model/MessageObjectAttachments} The populated <code>MessageObjectAttachments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageObjectAttachments();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');

                delete data['id'];
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');

                delete data['type'];
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');

                delete data['name'];
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');

                delete data['size'];
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');

                delete data['url'];
            }
            if (data.hasOwnProperty('preview_url')) {
                obj['preview_url'] = ApiClient.convertToType(data['preview_url'], 'String');

                delete data['preview_url'];
            }
            if (data.hasOwnProperty('link_expires')) {
                obj['link_expires'] = ApiClient.convertToType(data['link_expires'], 'Boolean');

                delete data['link_expires'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The ID of the attachment
 * @member {String} id
 */
MessageObjectAttachments.prototype['id'] = undefined;

/**
 * The mime-type of the attachment
 * @member {String} type
 */
MessageObjectAttachments.prototype['type'] = undefined;

/**
 * The name of the attachment
 * @member {String} name
 */
MessageObjectAttachments.prototype['name'] = undefined;

/**
 * The size of the attachment
 * @member {Number} size
 */
MessageObjectAttachments.prototype['size'] = undefined;

/**
 * A URL to the file
 * @member {String} url
 */
MessageObjectAttachments.prototype['url'] = undefined;

/**
 * A URL to a preview picture of the file
 * @member {String} preview_url
 */
MessageObjectAttachments.prototype['preview_url'] = undefined;

/**
 * If true, it will use the getMessageById endpoint for fetching updated attachment's urls. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension)
 * @member {Boolean} link_expires
 * @default false
 */
MessageObjectAttachments.prototype['link_expires'] = false;






export default MessageObjectAttachments;

