/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddAProductAllOf from './AddAProductAllOf';

/**
 * The AddAProduct model module.
 * @module model/AddAProduct
 * @version 1.0.0
 */
class AddAProduct {
    /**
     * Constructs a new <code>AddAProduct</code>.
     * @alias module:model/AddAProduct
     * @extends module:model/AddAProductAllOf
     * @implements module:model/AddAProductAllOf
     * @param name {String} Name of the product.
     */
    constructor(name) { 
        AddAProductAllOf.initialize(this);
        AddAProduct.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
    }

    /**
     * Constructs a <code>AddAProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddAProduct} obj Optional instance to populate.
     * @return {module:model/AddAProduct} The populated <code>AddAProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddAProduct();
            AddAProductAllOf.constructFromObject(data, obj);
            AddAProductAllOf.constructFromObject(data, obj);

        }
        return obj;
    }


}


// Implement AddAProductAllOf interface:
/**
 * Name of the product.
 * @member {String} name
 */
AddAProductAllOf.prototype['name'] = undefined;
/**
 * Product code.
 * @member {String} code
 */
AddAProductAllOf.prototype['code'] = undefined;
/**
 * Unit in which this product is sold
 * @member {String} unit
 */
AddAProductAllOf.prototype['unit'] = undefined;
/**
 * Tax percentage
 * @member {Number} tax
 * @default 0
 */
AddAProductAllOf.prototype['tax'] = 0;
/**
 * Whether this product will be made active or not.
 * @member {Object} active_flag
 */
AddAProductAllOf.prototype['active_flag'] = undefined;
/**
 * Whether this product can be selected in Deals or not.
 * @member {Object} selectable
 */
AddAProductAllOf.prototype['selectable'] = undefined;
/**
 * Visibility of the product. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.<dl class=\"fields-list\"><dt>1</dt><dd>Owner &amp; followers (private)</dd><dt>3</dt><dd>Entire company (shared)</dd></dl>
 * @member {String} visible_to
 */
AddAProductAllOf.prototype['visible_to'] = undefined;
/**
 * ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
 * @member {Number} owner_id
 */
AddAProductAllOf.prototype['owner_id'] = undefined;
/**
 * Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional). Note that there can only be one price per product per currency. When 'prices' is omitted altogether, no prices will be set up for the product
 * @member {Array.<Object>} prices
 */
AddAProductAllOf.prototype['prices'] = undefined;




export default AddAProduct;

