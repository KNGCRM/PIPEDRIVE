/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddARecurringSubscription model module.
 * @module model/AddARecurringSubscription
 * @version 1.0.0
 */
class AddARecurringSubscription {
    /**
     * Constructs a new <code>AddARecurringSubscription</code>.
     * @alias module:model/AddARecurringSubscription
     * @param dealId {Number} ID of the Deal this Recurring Subscription is associated with
     * @param currency {String} The currency of the Recurring Subscription. Accepts a 3-character currency code.
     * @param cadenceType {module:model/AddARecurringSubscription.CadenceTypeEnum} Interval between payments
     * @param cyclesCount {Number} Shows how many payments the Subscription has. Note that only one field must be set: cycles_count or infinite.
     * @param cycleAmount {Number} Amount of each payment
     * @param startDate {Date} Start date of the Recurring Subscription. Format: YYYY-MM-DD
     * @param infinite {Boolean} This indicates that the Recurring Subscription will last until it's manually canceled or deleted. Note that only one field must be set: cycles_count or infinite.
     */
    constructor(dealId, currency, cadenceType, cyclesCount, cycleAmount, startDate, infinite) { 
        
        AddARecurringSubscription.initialize(this, dealId, currency, cadenceType, cyclesCount, cycleAmount, startDate, infinite);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dealId, currency, cadenceType, cyclesCount, cycleAmount, startDate, infinite) { 
        obj['deal_id'] = dealId;
        obj['currency'] = currency;
        obj['cadence_type'] = cadenceType;
        obj['cycles_count'] = cyclesCount;
        obj['cycle_amount'] = cycleAmount;
        obj['start_date'] = startDate;
        obj['infinite'] = infinite;
    }

    /**
     * Constructs a <code>AddARecurringSubscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddARecurringSubscription} obj Optional instance to populate.
     * @return {module:model/AddARecurringSubscription} The populated <code>AddARecurringSubscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddARecurringSubscription();

            if (data.hasOwnProperty('deal_id')) {
                obj['deal_id'] = ApiClient.convertToType(data['deal_id'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('cadence_type')) {
                obj['cadence_type'] = ApiClient.convertToType(data['cadence_type'], 'String');
            }
            if (data.hasOwnProperty('cycles_count')) {
                obj['cycles_count'] = ApiClient.convertToType(data['cycles_count'], 'Number');
            }
            if (data.hasOwnProperty('cycle_amount')) {
                obj['cycle_amount'] = ApiClient.convertToType(data['cycle_amount'], 'Number');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('infinite')) {
                obj['infinite'] = ApiClient.convertToType(data['infinite'], 'Boolean');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [Object]);
            }
            if (data.hasOwnProperty('update_deal_value')) {
                obj['update_deal_value'] = ApiClient.convertToType(data['update_deal_value'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * ID of the Deal this Recurring Subscription is associated with
 * @member {Number} deal_id
 */
AddARecurringSubscription.prototype['deal_id'] = undefined;

/**
 * The currency of the Recurring Subscription. Accepts a 3-character currency code.
 * @member {String} currency
 */
AddARecurringSubscription.prototype['currency'] = undefined;

/**
 * Description of the Recurring Subscription
 * @member {String} description
 */
AddARecurringSubscription.prototype['description'] = undefined;

/**
 * Interval between payments
 * @member {module:model/AddARecurringSubscription.CadenceTypeEnum} cadence_type
 */
AddARecurringSubscription.prototype['cadence_type'] = undefined;

/**
 * Shows how many payments the Subscription has. Note that only one field must be set: cycles_count or infinite.
 * @member {Number} cycles_count
 */
AddARecurringSubscription.prototype['cycles_count'] = undefined;

/**
 * Amount of each payment
 * @member {Number} cycle_amount
 */
AddARecurringSubscription.prototype['cycle_amount'] = undefined;

/**
 * Start date of the Recurring Subscription. Format: YYYY-MM-DD
 * @member {Date} start_date
 */
AddARecurringSubscription.prototype['start_date'] = undefined;

/**
 * This indicates that the Recurring Subscription will last until it's manually canceled or deleted. Note that only one field must be set: cycles_count or infinite.
 * @member {Boolean} infinite
 */
AddARecurringSubscription.prototype['infinite'] = undefined;

/**
 * Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
 * @member {Array.<Object>} payments
 */
AddARecurringSubscription.prototype['payments'] = undefined;

/**
 * Indicates that the Deal value must be set to Recurring Subscription's MRR value
 * @member {Boolean} update_deal_value
 */
AddARecurringSubscription.prototype['update_deal_value'] = undefined;





/**
 * Allowed values for the <code>cadence_type</code> property.
 * @enum {String}
 * @readonly
 */
AddARecurringSubscription['CadenceTypeEnum'] = {

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "quarterly"
     * @const
     */
    "quarterly": "quarterly",

    /**
     * value: "yearly"
     * @const
     */
    "yearly": "yearly"
};



export default AddARecurringSubscription;

