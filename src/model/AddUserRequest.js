/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserAccess from './UserAccess';

/**
 * The AddUserRequest model module.
 * @module model/AddUserRequest
 * @version 1.0.0
 */
class AddUserRequest {
    /**
     * Constructs a new <code>AddUserRequest</code>.
     * @alias module:model/AddUserRequest
     * @param email {String} The email of the user
     */
    constructor(email) { 
        
        AddUserRequest.initialize(this, email);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email) { 
        obj['email'] = email;
    }

    /**
     * Constructs a <code>AddUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddUserRequest} obj Optional instance to populate.
     * @return {module:model/AddUserRequest} The populated <code>AddUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddUserRequest();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');

                delete data['email'];
            }
            if (data.hasOwnProperty('access')) {
                obj['access'] = ApiClient.convertToType(data['access'], [UserAccess]);

                delete data['access'];
            }
            if (data.hasOwnProperty('active_flag')) {
                obj['active_flag'] = ApiClient.convertToType(data['active_flag'], 'Boolean');

                delete data['active_flag'];
            }

            if (Object.keys(data).length > 0) {
                Object.assign(obj, data);
            }

        }
        return obj;
    }


}

/**
 * The email of the user
 * @member {String} email
 */
AddUserRequest.prototype['email'] = undefined;

/**
 * The access given to the user. Each item in the array represents access to a specific app. Optionally may include either admin flag or permission set ID to specify which access to give within the app. If both are omitted, the default access for the corresponding app will be used. It requires structure as follows: `[{ app: 'sales', permission_set_id: '62cc4d7f-4038-4352-abf3-a8c1c822b631' }, { app: 'global', admin: true }, { app: 'account_settings' }]` 
 * @member {Array.<module:model/UserAccess>} access
 */
AddUserRequest.prototype['access'] = undefined;

/**
 * Whether the user is active or not. `false` = Not activated, `true` = Activated
 * @member {Boolean} active_flag
 * @default true
 */
AddUserRequest.prototype['active_flag'] = true;






export default AddUserRequest;

