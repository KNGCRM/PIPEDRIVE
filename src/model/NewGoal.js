/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicGoal from './BasicGoal';

/**
 * The NewGoal model module.
 * @module model/NewGoal
 * @version 1.0.0
 */
class NewGoal {
    /**
     * Constructs a new <code>NewGoal</code>.
     * @alias module:model/NewGoal
     * @extends module:model/BasicGoal
     * @implements module:model/BasicGoal
     * @param assignee {Object} Who is this goal assigned to. It requires the following JSON structure: { \"id\": \"1\", \"type\": \"person\" }. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
     * @param type {Object} Type of the goal. It requires the following JSON structure: { \"name\": \"deals_started\", \"params\": { \"pipeline_id\": 1 } }. Type can be one of: `deals_won`,`deals_progressed`,`activities_completed`,`activities_added` or `deals_started`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. To track goal in all pipelines set `pipeline_id` as `null`.
     * @param expectedOutcome {Object} Expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: { \"target\": \"50\", \"tracking_metric\": \"quantity\" } or { \"target\": \"50\", \"tracking_metric\": \"sum\", \"currency_id\": 1 }. `currency_id` should only be added to `sum` type of goals.
     * @param duration {Object} Date when the goal starts and ends. It requires the following JSON structure: { \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }. Date in format of YYYY-MM-DD.
     * @param interval {module:model/NewGoal.IntervalEnum} Date when the goal starts and ends. It requires the following JSON structure: { \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }. Date in format of YYYY-MM-DD.
     */
    constructor(assignee, type, expectedOutcome, duration, interval) { 
        BasicGoal.initialize(this);
        NewGoal.initialize(this, assignee, type, expectedOutcome, duration, interval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assignee, type, expectedOutcome, duration, interval) { 
    }

    /**
     * Constructs a <code>NewGoal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewGoal} obj Optional instance to populate.
     * @return {module:model/NewGoal} The populated <code>NewGoal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewGoal();
            BasicGoal.constructFromObject(data, obj);
            BasicGoal.constructFromObject(data, obj);


            if (Object.keys(data).length > 0) {
                obj['extra'] = data;
            }

        }
        return obj;
    }


}


// Implement BasicGoal interface:
/**
 * Title of the goal.
 * @member {String} title
 */
BasicGoal.prototype['title'] = undefined;
/**
 * Who is this goal assigned to. It requires the following JSON structure: { \"id\": \"1\", \"type\": \"person\" }. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
 * @member {Object} assignee
 */
BasicGoal.prototype['assignee'] = undefined;
/**
 * Type of the goal. It requires the following JSON structure: { \"name\": \"deals_started\", \"params\": { \"pipeline_id\": 1 } }. Type can be one of: `deals_won`,`deals_progressed`,`activities_completed`,`activities_added` or `deals_started`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. To track goal in all pipelines set `pipeline_id` as `null`.
 * @member {Object} type
 */
BasicGoal.prototype['type'] = undefined;
/**
 * Expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: { \"target\": \"50\", \"tracking_metric\": \"quantity\" } or { \"target\": \"50\", \"tracking_metric\": \"sum\", \"currency_id\": 1 }. `currency_id` should only be added to `sum` type of goals.
 * @member {Object} expected_outcome
 */
BasicGoal.prototype['expected_outcome'] = undefined;
/**
 * Date when the goal starts and ends. It requires the following JSON structure: { \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }. Date in format of YYYY-MM-DD.
 * @member {Object} duration
 */
BasicGoal.prototype['duration'] = undefined;
/**
 * Date when the goal starts and ends. It requires the following JSON structure: { \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }. Date in format of YYYY-MM-DD.
 * @member {module:model/BasicGoal.IntervalEnum} interval
 */
BasicGoal.prototype['interval'] = undefined;




export default NewGoal;

