/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicPerson from './BasicPerson';
import NewPersonAllOf from './NewPersonAllOf';
import VisibleTo from './VisibleTo';

/**
 * The NewPerson model module.
 * @module model/NewPerson
 * @version 1.0.0
 */
class NewPerson {
    /**
     * Constructs a new <code>NewPerson</code>.
     * @alias module:model/NewPerson
     * @implements module:model/BasicPerson
     * @implements module:model/NewPersonAllOf
     * @param name {String} Person name
     */
    constructor(name) { 
        BasicPerson.initialize(this);NewPersonAllOf.initialize(this);
        NewPerson.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>NewPerson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewPerson} obj Optional instance to populate.
     * @return {module:model/NewPerson} The populated <code>NewPerson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewPerson();
            BasicPerson.constructFromObject(data, obj);
            NewPersonAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');

                delete data['name'];
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], 'Number');

                delete data['owner_id'];
            }
            if (data.hasOwnProperty('org_id')) {
                obj['org_id'] = ApiClient.convertToType(data['org_id'], 'Number');

                delete data['org_id'];
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], ['String']);

                delete data['email'];
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], ['String']);

                delete data['phone'];
            }
            if (data.hasOwnProperty('visible_to')) {
                obj['visible_to'] = ApiClient.convertToType(data['visible_to'], VisibleTo);

                delete data['visible_to'];
            }
            if (data.hasOwnProperty('add_time')) {
                obj['add_time'] = ApiClient.convertToType(data['add_time'], 'String');

                delete data['add_time'];
            }

            if (Object.keys(data).length > 0) {
                obj['extra'] = data;
            }

        }
        return obj;
    }


}

/**
 * Person name
 * @member {String} name
 */
NewPerson.prototype['name'] = undefined;

/**
 * ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
 * @member {Number} owner_id
 */
NewPerson.prototype['owner_id'] = undefined;

/**
 * ID of the organization this person will belong to.
 * @member {Number} org_id
 */
NewPerson.prototype['org_id'] = undefined;

/**
 * Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
 * @member {Array.<String>} email
 */
NewPerson.prototype['email'] = undefined;

/**
 * Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
 * @member {Array.<String>} phone
 */
NewPerson.prototype['phone'] = undefined;

/**
 * Visibility of the person. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.<dl class=\"fields-list\"><dt>1</dt><dd>Owner &amp; followers (private)</dd><dt>3</dt><dd>Entire company (shared)</dd></dl>
 * @member {module:model/VisibleTo} visible_to
 */
NewPerson.prototype['visible_to'] = undefined;

/**
 * Optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
 * @member {String} add_time
 */
NewPerson.prototype['add_time'] = undefined;


// Implement BasicPerson interface:
/**
 * Person name
 * @member {String} name
 */
BasicPerson.prototype['name'] = undefined;
/**
 * ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
 * @member {Number} owner_id
 */
BasicPerson.prototype['owner_id'] = undefined;
/**
 * ID of the organization this person will belong to.
 * @member {Number} org_id
 */
BasicPerson.prototype['org_id'] = undefined;
/**
 * Email addresses (one or more) associated with the person, presented in the same manner as received by GET request of a person.
 * @member {Array.<String>} email
 */
BasicPerson.prototype['email'] = undefined;
/**
 * Phone numbers (one or more) associated with the person, presented in the same manner as received by GET request of a person.
 * @member {Array.<String>} phone
 */
BasicPerson.prototype['phone'] = undefined;
/**
 * Visibility of the person. If omitted, visibility will be set to the default visibility setting of this item type for the authorized user.<dl class=\"fields-list\"><dt>1</dt><dd>Owner &amp; followers (private)</dd><dt>3</dt><dd>Entire company (shared)</dd></dl>
 * @member {module:model/VisibleTo} visible_to
 */
BasicPerson.prototype['visible_to'] = undefined;
// Implement NewPersonAllOf interface:
/**
 * Optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
 * @member {String} add_time
 */
NewPersonAllOf.prototype['add_time'] = undefined;




export default NewPerson;

