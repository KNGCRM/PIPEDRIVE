/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateTeamAllOf from './UpdateTeamAllOf';
import UpdateTeamAllOf1 from './UpdateTeamAllOf1';

/**
 * The UpdateATeam model module.
 * @module model/UpdateATeam
 * @version 1.0.0
 */
class UpdateATeam {
    /**
     * Constructs a new <code>UpdateATeam</code>.
     * @alias module:model/UpdateATeam
     * @implements module:model/UpdateTeamAllOf
     * @implements module:model/UpdateTeamAllOf1
     * @param name {String} The Team name
     * @param managerId {Number} The Team manager ID
     */
    constructor(name, managerId) { 
        UpdateTeamAllOf.initialize(this, name, managerId);UpdateTeamAllOf1.initialize(this);
        UpdateATeam.initialize(this, name, managerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, managerId) { 
        obj['name'] = name;
        obj['manager_id'] = managerId;
    }

    /**
     * Constructs a <code>UpdateATeam</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateATeam} obj Optional instance to populate.
     * @return {module:model/UpdateATeam} The populated <code>UpdateATeam</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateATeam();
            UpdateTeamAllOf.constructFromObject(data, obj);
            UpdateTeamAllOf1.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('manager_id')) {
                obj['manager_id'] = ApiClient.convertToType(data['manager_id'], 'Number');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], Array);
            }
            if (data.hasOwnProperty('active_flag')) {
                obj['active_flag'] = ApiClient.convertToType(data['active_flag'], 'Number');
            }
            if (data.hasOwnProperty('deleted_flag')) {
                obj['deleted_flag'] = ApiClient.convertToType(data['deleted_flag'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The Team name
 * @member {String} name
 */
UpdateATeam.prototype['name'] = undefined;

/**
 * The Team description
 * @member {String} description
 */
UpdateATeam.prototype['description'] = undefined;

/**
 * The Team manager ID
 * @member {Number} manager_id
 */
UpdateATeam.prototype['manager_id'] = undefined;

/**
 * IDs of the Users that belong to the Team
 * @member {Array} users
 */
UpdateATeam.prototype['users'] = undefined;

/**
 * Flag that indicates if the Team is activated
 * @member {Number} active_flag
 */
UpdateATeam.prototype['active_flag'] = undefined;

/**
 * Flag that indicates if the Team is deleted
 * @member {Number} deleted_flag
 */
UpdateATeam.prototype['deleted_flag'] = undefined;


// Implement UpdateTeamAllOf interface:
/**
 * The Team name
 * @member {String} name
 */
UpdateTeamAllOf.prototype['name'] = undefined;
/**
 * The Team description
 * @member {String} description
 */
UpdateTeamAllOf.prototype['description'] = undefined;
/**
 * The Team manager ID
 * @member {Number} manager_id
 */
UpdateTeamAllOf.prototype['manager_id'] = undefined;
/**
 * IDs of the Users that belong to the Team
 * @member {Array} users
 */
UpdateTeamAllOf.prototype['users'] = undefined;
// Implement UpdateTeamAllOf1 interface:
/**
 * Flag that indicates if the Team is activated
 * @member {Number} active_flag
 */
UpdateTeamAllOf1.prototype['active_flag'] = undefined;
/**
 * Flag that indicates if the Team is deleted
 * @member {Number} deleted_flag
 */
UpdateTeamAllOf1.prototype['deleted_flag'] = undefined;




export default UpdateATeam;

