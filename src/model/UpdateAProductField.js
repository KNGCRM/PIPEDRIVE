/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateAProductField model module.
 * @module model/UpdateAProductField
 * @version 1.0.0
 */
class UpdateAProductField {
    /**
     * Constructs a new <code>UpdateAProductField</code>.
     * @alias module:model/UpdateAProductField
     * @param name {String} Name of the field
     */
    constructor(name) { 
        
        UpdateAProductField.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>UpdateAProductField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAProductField} obj Optional instance to populate.
     * @return {module:model/UpdateAProductField} The populated <code>UpdateAProductField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAProductField();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pdOptions')) {
                obj['pdOptions'] = ApiClient.convertToType(data['pdOptions'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * Name of the field
 * @member {String} name
 */
UpdateAProductField.prototype['name'] = undefined;

/**
 * When field_type is either set or enum, possible options on update must be supplied as an array of objects each containing id and label, for example: [{\"id\":1, \"label\":\"red\"},{\"id\":2, \"label\":\"blue\"},{\"id\":3, \"label\":\"lilac\"}]
 * @member {Array.<Object>} pdOptions
 */
UpdateAProductField.prototype['pdOptions'] = undefined;






export default UpdateAProductField;

